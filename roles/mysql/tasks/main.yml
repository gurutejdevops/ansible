#     - name: Ensure CentOS vault base repo is in place
#       ansible.builtin.copy:
#         src: centos.repo
#         dest: /etc/yum.repos.d/CentOS-Base.repo
#         backup: yes
    
# # 1) Put the MySQL 5.7 repo file in place (so yum can find 5.7 packages)
#     - name: Add MySQL 5.7 yum repo
#       ansible.builtin.get_url:
#         url: https://raw.githubusercontent.com/stans-robot-project/mysql/main/mysql.repo
#         dest: /etc/yum.repos.d/mysql.repo
#         mode: '0644'

#     # 2) Make sure EPEL is present (provides python PyMySQL on EL7)
#     - name: Install EPEL repository
#       ansible.builtin.yum:
#         name: epel-release
#         state: present

#     - name: Remove any existing MySQL 8.0 packages
#       ansible.builtin.yum:
#         name:
#           - mysql-community-client
#           - mysql-community-server
#           - mysql-community-common
#           - mysql-community-libs
#           - mysql-community-client-plugins
#         state: absent
#         autoremove: yes

#     # 3) Install server + unzip + PyMySQL driver used by community.mysql modules
#     - name: Install MySQL server, unzip, and PyMySQL driver
#       ansible.builtin.yum:
#         name:
#           - mysql-community-server
#           - unzip
#           - python2-PyMySQL         # EL7 target; provides the DB driver
#         state: present
#         update_cache: yes

#     # 4) Start MySQL and enable on boot
#     - name: Enable and start mysqld
#       ansible.builtin.service:
#         name: mysqld
#         state: started
#         enabled: yes

#     # 5) Wait until port 3306 is listening so we can talk to MySQL
#     - name: Wait for MySQL port 3306 to be ready
#       ansible.builtin.wait_for:
#         host: 127.0.0.1
#         port: 3306
#         state: started
#         timeout: 60

#     - name: Read Mysql log
#       ansible.builtin.slurp:
#         path: /var/log/mysqld.log
#       register: mysqld_log_raw
    
#     - name: Extract temporary root password
#       ansible.builtin.set_fact:
#         mysql_temp_password: "{{ (mysqld_log_raw.content | b64decode).split('\n') | select('search', 'temporary password') | list | last | regex_replace('.*: ', '') }}"

#     - name: print the content
#       ansible.builtin.debug:
#         msg: "The output is {{ mysql_temp_password }}"     

#     - name: Reset MySQL root password (first-time)
#       ansible.builtin.command: >
#         mysql --connect-expired-password -uroot -p{{ mysql_temp_password }}
#         -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'RoboShop@1';"
#       args:
#         warn: false
#       register: reset_result
#       changed_when: "'ERROR' not in reset_result.stderr"

#     - name: Ensure root password is RoboShop@1 (idempotent)
#       community.mysql.mysql_user:
#         name: root
#         host: localhost
#         password: "RoboShop@1"
#         login_user: root
#         login_password: "RoboShop@1"
#         check_implicit_admin: true
#         state: present

#     - name: Uninstall validate_password plugin (ignore if already absent)
#       community.mysql.mysql_query:
#         login_user: root
#         login_password: "RoboShop@1"
#         query: "UNINSTALL PLUGIN validate_password;"
#       ignore_errors: yes

    # 9) Download the schema zip that contains shipping.sql
    - name: Download shipping schema zip
      ansible.builtin.get_url:
        url: https://github.com/stans-robot-project/mysql/archive/refs/heads/main.zip
        dest: /tmp/mysql-main.zip
        mode: '0644'

    # 10) Unzip to /tmp/mysql-main
    - name: Unarchive schema
      ansible.builtin.unarchive:
        src: /tmp/mysql-main.zip
        dest: /tmp/
        remote_src: yes

    # 11) Import shipping.sql into MySQL (module, not shell)
    - name: Load shipping.sql schema
      community.mysql.mysql_db:
        name: shipping
        state: import
        target: /tmp/mysql-main/shipping.sql
        login_user: root
        login_password: "RoboShop@1"

    